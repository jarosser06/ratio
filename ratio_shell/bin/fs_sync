#!/bin/bash

# fs_sync - Sync _fs directory to Ratio installation
# Place this script in ~/.rto/shell/bin/ to use as a custom Ratio Shell command

set -e  # Exit on any error

# Configuration
FS_SOURCE="_fs"
RATIO_DEST="ratio:/"
DEFAULT_FILE_PERMS="644"
DEFAULT_DIR_PERMS="755"
AGENT_FILE_PERMS="755"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: fs_sync [OPTIONS]"
    echo ""
    echo "Sync _fs directory to Ratio installation with proper permissions"
    echo ""
    echo "Options:"
    echo "  --source PATH     Source directory to sync (default: _fs)"
    echo "  --dest PATH       Destination path in Ratio (default: ratio:/)"
    echo "  --force           Overwrite existing files"
    echo "  --dry-run         Show what would be done without making changes"
    echo "  --verbose         Show detailed progress"
    echo "  --help            Show this help message"
    echo ""
    echo "The script will:"
    echo "  - Sync all files with 644 permissions (except agent files)"
    echo "  - Sync .agent files with 755 permissions"
    echo "  - Create directories with 755 permissions"
    echo "  - Exclude .gitkeep files"
    echo "  - Ensure run directory exists"
}

# Parse command line arguments
FORCE=""
DRY_RUN=""
VERBOSE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --source)
            FS_SOURCE="$2"
            shift 2
            ;;
        --dest)
            RATIO_DEST="$2"
            shift 2
            ;;
        --force)
            FORCE="--force"
            shift
            ;;
        --dry-run)
            DRY_RUN="--dry-run"
            shift
            ;;
        --verbose)
            VERBOSE="--verbose"
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Check if source directory exists
if [ ! -d "$FS_SOURCE" ]; then
    print_error "Source directory '$FS_SOURCE' not found"
    print_error "Make sure you're running this from the repository root or specify --source"
    exit 1
fi

print_status "Starting Ratio filesystem sync"
print_status "Source: $FS_SOURCE"
print_status "Destination: $RATIO_DEST"

# Build common rto sync arguments
COMMON_ARGS="--recursive --max-depth=10"

if [ -n "$FORCE" ]; then
    COMMON_ARGS="$COMMON_ARGS $FORCE"
fi

if [ -n "$DRY_RUN" ]; then
    COMMON_ARGS="$COMMON_ARGS $DRY_RUN"
fi

if [ -n "$VERBOSE" ]; then
    COMMON_ARGS="$COMMON_ARGS $VERBOSE"
fi

# Step 1: Sync directory structure and non-agent files
print_status "Step 1: Syncing directory structure and regular files..."
# Sync each top-level item in _fs individually to ratio root
for item in "$FS_SOURCE"/*; do
    if [ -e "$item" ]; then
        item_name=$(basename "$item")

        # Skip the run directory for now, we'll handle it specially
        if [ "$item_name" = "run" ]; then
            continue
        fi

        if [ -n "$VERBOSE" ]; then
            print_status "Syncing: $item_name"
        fi

        rto sync $COMMON_ARGS \
            --permissions="$DEFAULT_FILE_PERMS" \
            --dir-permissions="$DEFAULT_DIR_PERMS" \
            --exclude="*.agent" \
            --exclude=".gitkeep" \
            --type-map='{"md":"ratio::text","txt":"ratio::text","json":"ratio::file","py":"ratio::file"}' \
            "$item" "$RATIO_DEST$item_name"
    fi
done

# Step 2: Sync only .agent files with 755 permissions  
print_status "Step 2: Syncing agent files with executable permissions..."
# Find all .agent files and sync them individually with correct permissions
find "$FS_SOURCE" -name "*.agent" -type f | while read -r agent_file; do
    # Calculate the relative path from FS_SOURCE
    rel_path="${agent_file#$FS_SOURCE/}"

    dest_path="$RATIO_DEST$rel_path"

    if [ -n "$VERBOSE" ]; then
        print_status "Syncing agent: $rel_path"
    fi

    # Sync individual agent file with correct permissions
    rto sync $COMMON_ARGS \
        --permissions="$AGENT_FILE_PERMS" \
        --dir-permissions="$DEFAULT_DIR_PERMS" \
        --type-map='{"agent":"ratio::agent"}' \
        "$agent_file" "$dest_path"
done

# Step 3: Ensure run directory exists (without .gitkeep)
print_status "Step 3: Ensuring run directory exists..."
if [ -z "$DRY_RUN" ]; then
    rto mkdir "${RATIO_DEST}run" --permissions="$DEFAULT_DIR_PERMS" 2>/dev/null || true

    print_success "Run directory ensured"

else
    print_status "[DRY RUN] Would create run directory"
fi

# Step 4: Verify sync results (if not dry run)
if [ -z "$DRY_RUN" ]; then
    print_status "Step 4: Verifying sync results..."

    # Count agent files in source
    AGENT_COUNT=$(find "$FS_SOURCE" -name "*.agent" -type f | wc -l)

    print_status "Found $AGENT_COUNT agent files in source"

    # Verify a sample agent file has correct permissions
    SAMPLE_AGENT=$(find "$FS_SOURCE" -name "*.agent" -type f | head -1)

    if [ -n "$SAMPLE_AGENT" ]; then
        AGENT_NAME=$(basename "$SAMPLE_AGENT")

        AGENT_PATH="${RATIO_DEST}agents/core/$AGENT_NAME"

        if rto stat "$AGENT_PATH" 2>/dev/null | grep -q "Mode: 755"; then
            print_success "Agent files have correct permissions (755)"

        else
            print_warning "Could not verify agent file permissions"
        fi
    fi
fi

print_success "Filesystem sync completed successfully!"

# Summary
echo ""
print_status "Summary:"
print_status "✓ Regular files synced with 644 permissions"
print_status "✓ Agent files synced with 755 permissions"
print_status "✓ Directories created with 755 permissions"
print_status "✓ .gitkeep files excluded"
print_status "✓ Run directory ensured"

if [ -n "$DRY_RUN" ]; then
    print_warning "This was a dry run - no actual changes were made"
    print_status "Remove --dry-run to perform the actual sync"
fi